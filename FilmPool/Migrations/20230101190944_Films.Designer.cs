// <auto-generated />
using FilmPool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmPool.Migrations
{
    [DbContext(typeof(FilmPoolDbContext))]
    [Migration("20230101190944_Films")]
    partial class Films
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmPool.DbModels.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Duration");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Title");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.HasIndex("Genre");

                    b.ToTable("Films", (string)null);
                });

            modelBuilder.Entity("FilmPool.DbModels.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreName = "Comedy"
                        },
                        new
                        {
                            Id = 2,
                            GenreName = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            GenreName = "Melodrama"
                        },
                        new
                        {
                            Id = 4,
                            GenreName = "Detective"
                        },
                        new
                        {
                            Id = 5,
                            GenreName = "Documentary"
                        },
                        new
                        {
                            Id = 6,
                            GenreName = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            GenreName = "Music"
                        },
                        new
                        {
                            Id = 8,
                            GenreName = "Fiction"
                        },
                        new
                        {
                            Id = 9,
                            GenreName = "Animation"
                        },
                        new
                        {
                            Id = 10,
                            GenreName = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            GenreName = "ActionMovie"
                        },
                        new
                        {
                            Id = 12,
                            GenreName = "Unknown"
                        },
                        new
                        {
                            Id = 13,
                            GenreName = "Adventures"
                        },
                        new
                        {
                            Id = 14,
                            GenreName = "ForAdults"
                        },
                        new
                        {
                            Id = 15,
                            GenreName = "War"
                        },
                        new
                        {
                            Id = 16,
                            GenreName = "Family"
                        },
                        new
                        {
                            Id = 17,
                            GenreName = "Thriller"
                        },
                        new
                        {
                            Id = 18,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            GenreName = "Western"
                        },
                        new
                        {
                            Id = 20,
                            GenreName = "Mystique"
                        },
                        new
                        {
                            Id = 21,
                            GenreName = "Short"
                        },
                        new
                        {
                            Id = 22,
                            GenreName = "Musical"
                        },
                        new
                        {
                            Id = 23,
                            GenreName = "Historical"
                        },
                        new
                        {
                            Id = 24,
                            GenreName = "Noir"
                        });
                });

            modelBuilder.Entity("FilmPool.DbModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("FilmPool.DbModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirsName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRole");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FilmPool.DbModels.Film", b =>
                {
                    b.HasOne("FilmPool.DbModels.Genre", "FilmGenre")
                        .WithMany()
                        .HasForeignKey("Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmGenre");
                });

            modelBuilder.Entity("FilmPool.DbModels.User", b =>
                {
                    b.HasOne("FilmPool.DbModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("UserRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
